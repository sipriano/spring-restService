# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: ''
  imageRepository: ''
  containerRegistry: ''
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: ''
  azureSubscriptionEndpoint: ''
  repository: '$(Build.Repository.Name)'
  projectName: 'spring'
  pass: 
  chartVersion: 1.0.0

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@0
      displayName: Build a container image
      inputs:
        containerregistrytype: Container Registry
        dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
        dockerFile: Dockerfile
        imageName: $(containerRegistry)/eda/$(repository):latest
        includeSourceTags: true
    - task: Docker@0
      displayName: Push a container image
      inputs:
        containerregistrytype: Container Registry
        dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
        action: Push an image
        imageName: $(containerRegistry)/spring/$(repository):latest
    - task: HelmInstaller@0
      displayName: Install Helm 3.5.4
      inputs:
        helmVersion: 3.5.4
        kubectlVersion: 1.10.3
        checkLatestKubeCtl: false
    - task: Bash@3
      displayName: Package and push chart
      inputs:
        targetType: inline
        script: >-

          chartVersion=`cat $(projectName)/Chart.yaml | grep version | awk -F ': ' '{print $2}'`

          echo "##vso[task.setvariable variable=chartVersion;]$chartVersion"

          helm package $(projectName)

          export HELM_EXPERIMENTAL_OCI=1


          echo "$(pass)" | helm registry login $(containerRegistry) --username  --password-stdin

          
          helm chart save $(projectName)-$chartVersion.tgz $(containerRegistry)/helm/$(projectName)-$chartVersion.tgz:latest

          helm chart push $(containerRegistry)/helm/$(projectName)-$chartVersion.tgz:latest

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: ''
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Pull and install chart
            inputs:
              targetType: inline
              script: >2-

                chartVersion=`cat $(projectName)/Chart.yaml | grep version | awk -F ': ' '{print $2}'`

                export HELM_EXPERIMENTAL_OCI=1

                echo "$(pass)" | helm registry login $(containerRegistry) --username  --password-stdin

                helm chart pull $(containerRegistry)/helm/$(projectName)-$(chartVersion).tgz:latest


                helm chart export $(containerRegistry)/helm/$(projectName)-$(chartVersion).tgz:latest --destination $(build.stagingdirectory)
          - task: HelmDeploy@0
            displayName: helm deploy
            inputs:
              azureSubscriptionEndpoint: 
              azureResourceGroup: 
              kubernetesCluster: 
              namespace: hello
              command: install
              chartType: FilePath
              chartName: drop
              chartPath: $(build.stagingdirectory)/$(projectName)/
